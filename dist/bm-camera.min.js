/*
 * @blinkmobile/camera: v0.0.3 | https://github.com/blinkmobile/camera
 * (c) 2017 BlinkMobile | Released under the ISC license
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.bmCameraFactory=t()}(this,function(){"use strict";function e(){this.availableDevices=[{deviceId:Camera.Direction.BACK,label:"Rear Camera"},{deviceId:Camera.Direction.FRONT,label:"Front Camera"}],this.defaultConstraints={cameraDirection:Camera.Direction.BACK,quality:50,destinationType:Camera.DestinationType.FILE_URI,encodingType:Camera.EncodingType.PNG,sourceType:Camera.PictureSourceType.CAMERA,correctOrientation:!0},o.set(this,{result:null})}function t(){for(var t=arguments.length,i=Array(t),r=0;r<t;r++)i[r]=arguments[r];return i.unshift(null),new(e.bind.apply(e,i))}function i(e){if(!e)throw new TypeError("WebRTCCamera expects a video element during instansiation");this.defaultConstraints={video:!0,audio:!1},this.availableDevices=[],s.set(this,{videoEl:e,stream:null,videoTrack:null,authorised:!1,result:null})}function r(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.unshift(null),new(i.bind.apply(i,t))}function n(){for(var e=!(!window.Camera||!navigator.camera),i=arguments.length,n=Array(i),o=0;o<i;o++)n[o]=arguments[o];return e?t.apply(null,n):r.apply(null,n)}var o=new WeakMap;e.prototype.getDevices=function(){return Promise.resolve(this.availableDevices)},e.prototype.useDevice=function(e){if(!("deviceId"in e))throw new TypeError("Invalid device selected, must be of type MediaDeviceInfo");this.defaultConstraints.cameraDirection=e.deviceId},e.prototype.open=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.defaultConstraints;return t=Object.assign({},this.defaultConstraints,t),new Promise(function(i,r){var n=function(t){o.get(e).result=t,i(t)};navigator.camera.getPicture(n,r,t)})},e.prototype.getPicture=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.defaultConstraints,t=o.get(this);return t.result?Promise.resolve(t.result):this.open(e).then(function(){var e=t.result;return t.result=null,e})};var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=new WeakMap;return i.prototype.useDevice=function(e){if(this.close(),!("deviceId"in e))throw new TypeError("Invalid device selected, must be of type MediaDeviceInfo");var t="object"===a(this.defaultConstraints.video)?this.defaultConstraints.video:{};return t.deviceId={exact:e.deviceId},this.defaultConstraints.video=t,this.open()},i.prototype.getDevices=function(){var e=this;return s.get(this).authorised?navigator.mediaDevices&&navigator.mediaDevices.enumerateDevices?navigator.mediaDevices.enumerateDevices().then(function(t){return e.availableDevices=t.filter(function(e){return"videoinput"===e.kind.toLowerCase()}),e.availableDevices}):Promise.reject(new Error("Media Devices API not supported in this browser")):Promise.resolve([])},i.prototype.open=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.defaultConstraints;return t=Object.assign({},this.defaultConstraints,t),new Promise(function(i,r){getUserMedia(t,function(t,n){if(t)return r(t);var o=n.getVideoTracks(),a=s.get(e);return a.authorised=!0,o.length?(a.videoEl.addEventListener("canplay",i,{once:!0}),a.videoTrack=o[0],a.stream=n,void(a.videoEl.srcObject=n)):(a.stream=null,a.videoTrack=null,r(new Error("Could not get a video track from stream")))})})},i.prototype.getPicture=function(){if(!s.get(this).authorised)return Promise.reject(new DOMException("User has not authorised use of the camera","NotAllowedError"));var e=s.get(this),t=document.createElement("canvas"),i=t.getContext("2d"),r=e.videoEl;return t.width=r.videoWidth,t.height=r.videoHeight,i.drawImage(e.videoEl,0,0),Promise.resolve(t.toDataURL("image/png"))},i.prototype.close=function(){var e=s.get(this).videoTrack;e&&e.stop()},n});